# Creates a special "matrix" object that can cache its invers
makeCacheMatrix <- function(x = matrix()) {
  inv <- NULL     # Variable to store the inverse

# Function to set the matrix
  set <- function(y) {
    x <<- y
    inv <<- NULL      # Reset the cached inverse  when setting a new matrix
  }

# Function to get the matrix
  get <- function() x

# Function to se the inverse of the matrix
  setInverse <- function(inverse) inv <<- inverse

# Function to get the inverse of the matrix
  getInverse <- function() inv

# Return a list of functions to access and modify the matrix and inverse
  list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}

# Computes the inverse of the special matrix object
cacheSolve <- function(x, ...) {
  inv <- x$getInverse()       # check if inverse is already cached
  
  # If cached inverse exists, return it
  if (!is.null(inv)) {
    message("Getting cached data")
    return(inv)
  }
  
 # Otherwise, compute the inverse
  mat <- x$get()
  inv <- solve(mat, ...)      # Compute inverse
  x$setInverse(inv)           # Cached the computed inverse
  
  return(inv)                 # Return the inverse
}
